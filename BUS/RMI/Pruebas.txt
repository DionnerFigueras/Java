package BUS.RMI;

import java.rmi.AccessException;
import java.rmi.AlreadyBoundException;
import java.rmi.NotBoundException;
import java.rmi.Remote;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;


public class ServerRMI {
    private static boolean is_binding;
    private static Registry registry;
    public static void main(String[] args) {
        try {
            RemoteDesktopImplements server = new RemoteDesktopImplements();
            Remote serverStub = UnicastRemoteObject.exportObject(server, 0);
            registry = LocateRegistry.createRegistry(1234);
            registry.bind("RemoteDesktop", serverStub);
            is_binding = true;
            System.out.println("RMI server is Ready.");
        } catch (RemoteException | AlreadyBoundException e) {
            e.printStackTrace();
        }
    }

    public boolean getIsBinding() {
        return is_binding;
    }

    public static void stopBinding() throws NotBoundException, AccessException, RemoteException {
        if (is_binding) {
            registry.unbind("RemoteDesktop");
            UnicastRemoteObject.unexportObject(registry, true);
            is_binding = false;
        }
    }
}

/*
 * try {
 * RemoteDesktopImplements server = new RemoteDesktopImplements();
 * Remote serverStub = UnicastRemoteObject.exportObject(server, 0);
 * Registry registry = LocateRegistry.createRegistry(1234);
 * registry.bind("RemoteDesktop", serverStub);
 * System.out.println("RMI server is Listo papa.");
 * HardwareGraph hardwareGraph = new HardwareGraph();
 * hardwareGraph.setVisible(true);
 * } catch (RemoteException | AlreadyBoundException e) {
 * e.printStackTrace();
 * }
 */

 ****************************************************************************
 import java.rmi.Naming;
import java.rmi.RemoteException;

public class RemoteDesktopClient {
    public static void main(String[] args) throws RemoteException, Exception {
        RemoteDesktopInterface remoteDesktop = (RemoteDesktopInterface) Naming.lookup("//localhost:1099/RemoteDesktop");
        // ... Comunicación con el servidor (No se como carajos voy a hacer eso)...
    }
}


***************************************************************************************************
package BUS.RMI;

import java.awt.AWTException;
import java.net.MalformedURLException;
import java.rmi.AccessException;
import java.rmi.AlreadyBoundException;
import java.rmi.Naming;
import java.rmi.NotBoundException;
import java.rmi.Remote;
import java.rmi.RemoteException;
import java.rmi.registry.LocateRegistry;
import java.rmi.registry.Registry;
import java.rmi.server.UnicastRemoteObject;

public class ServerRMI {
    private static boolean is_binding;
    private String url;
    private static Registry registry;
    
    public ServerRMI() {
        this.url = null;
        this.is_binding = false;
    }

    public static void main(String[] args) {
        try {
            RemoteDesktopImplements server = new RemoteDesktopImplements();
            Remote serverStub = UnicastRemoteObject.exportObject(server, 0);
            registry = LocateRegistry.createRegistry(1234);
            registry.bind("RemoteDesktop", serverStub);
            is_binding = true;
            System.out.println("RMI server is Ready.");
        } catch (RemoteException | AlreadyBoundException e) {
            e.printStackTrace();
        }
    }

    public void startBindingOnRmiServer(String host, int port)
            throws RemoteException, MalformedURLException, AWTException {
        if (!this.is_binding) {
            try {
                this.url = "rmi://" + host + ":" + port + "/remote";
                System.setProperty("java.rmi.server.hostname", host);
                LocateRegistry.createRegistry(port);
                Naming.rebind(this.url, new RemoteDesktopImplements());
                this.is_binding = true;
            } catch (Exception e) {
                Naming.rebind(this.url, new RemoteDesktopImplements());
            }
        }
    }

    public void stopBinding() throws NotBoundException, AccessException, RemoteException, MalformedURLException {
        if (this.is_binding) {
            Naming.unbind(this.url);
            this.url = null;
            this.is_binding = false;
        }
    }

    public boolean getIsBinding() {
        return this.is_binding;
    }

}

****************************************************************************************************
package TEST;

import BUS.RMI.RemoteDesktopClient;
import BUS.RMI.RemoteDesktopInterface;
import BUS.RMI.ServerRMI;

public class TestClientRmi {

    public static void main(String[] args) {
        RemoteDesktopClient client = new RemoteDesktopClient();

        try {
            client.startConnectingToRmiServer("localhost", 1099);
            System.out.println("Conectado al servidor RMI en localhost:1099");

            // Llamada a un método remoto para probar la conexión
            RemoteDesktopInterface remoteObj = client.getRemoteObject();
            String message = remoteObj.getMessage();
            System.out.println("Mensaje del servidor: " + message);

            // Cerrar la conexión
            client.stopConnectingToRmiServer();
            System.out.println("Desconectado del servidor RMI");
        } catch (Exception e) {
            System.err.println("Error al conectar al servidor RMI: " + e.getMessage());
        }
    }

    public static void createRMIServer() {
        ServerRMI serverRMI = new ServerRMI();
        try {
            serverRMI.startBindingOnRmiServer("localhost", 1099);
            System.out.println("Servidor RMI iniciado en localhost:1099");
            System.out.println("Esperando conexiones...");
            while (true) {
                // Bucle infinito para mantener el servidor en ejecución
                Thread.sleep(1000);
            }
        } catch (Exception e) {
            System.err.println("Error al iniciar servidor RMI: " + e.getMessage());
        }
    }

}